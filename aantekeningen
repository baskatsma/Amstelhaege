# TODO voor komende week:
# Vrijstand toevoegen: mag overlappen, de huizen niet!
# Score functie: eerst zonder vrijstand, daarna met
# Hillclimber implementeren
# Matplotlib gebruiken (X)
# Afmetingen kloppend maken (X)

# Daarna TODO:
# Water toevoegen
# Pythagoras hoeken implementeren in vrijstand
# Optimale score?

----------------------------------------------------------------------------

Werking (stochastische) Hillclimber:
Random begin bij situatie, bepaal de score
Breng kleine wijzigingen aan (bijv. switch random 2 nummers) en bepaal nieuwe score
Beter? Houden. Slechter? Weggooien!
Stabiliseert na verloop van tijd.
--> Lokaal optimum. Goede oplossing, maar niet de beste.

-----------------------------------------------------------------------------

Werking Simulated Annealing algoritme:
SA is een stochastic hillclimber die ook verslechteringen accepteert.
MAAR: een grote verslechtering --> kleine acceptatiekans
EN: een lagere temperatuur --> kleinere acceptatiekans
Claim: blijft niet steken in lokaal optimum

Begin met een random tour: bereken de score
Maak een random mutatie (zolang iets) --> bereken de score
Score beter dan de vorige tour? --> bewaren en opnieuw
Score slechter? --> kijken voor acceptatiekans

Acceptatiekans = e ^(verkorting/temperatuur)
Cooling scheme = verkorting/temperatuur
Verkorting = lengte(n) - lengte(n-1)
Temperatuur = T(eind â€“ begin)*(n/N)
N = huidige iteratie, N = totaal aantal iteraties
